plugins {
    id "java-library"
    id "eclipse"
    id "maven-publish"
    id "fabric-loom" version "${loom_version}" apply false
    id "com.diffplug.spotless" version "7.2.1"
    //id "me.modmuss50.remotesign" version "0.5.0" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

//======================================================================================== READ LOCAL PROPERTIES
//============================================================== REPSY MAVEN
def ENV = System.getenv()
def systemRepsyURL = ENV.REPSY_URL
def systemRepsyUsername = ENV.REPSY_USERNAME
def systemRepsyPassword = ENV.REPSY_PASSWORD

Properties properties = new Properties()
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists())
    properties.load(propertiesFile.newDataInputStream())

project.ext {
    localRepsyUrl = properties.getProperty('REPSY_URL')
    localRepsyUsername = properties.getProperty('REPSY_USERNAME')
    localRepsyPassword = properties.getProperty('REPSY_PASSWORD')
}

def repsyUrl = project.ext.localRepsyUrl ?: systemRepsyURL
def repsyUsername = project.ext.localRepsyUsername ?: systemRepsyUsername
def repsyPassword = project.ext.localRepsyPassword ?: systemRepsyPassword
//============================================================== CURSEFORGE
//============================================================== MODRINTH
//============================================================== GITHUB

//======================================================================================== SETUP BASICS
def isCi = providers.environmentVariable("CI").present || project.hasProperty("ci")

def branchProvider = providers.of(GitBranchValueSource.class) {}

def getBranchSafe = {
    try {
        return branchProvider.get().replace("/", "_")
    } catch (Exception e) {
        logger.warn("Could not determine git branch for CI suffix: " + e.message)
        return "unknown"
    }
}

version = project.version + "+MC-${minecraft_version}-" + (isCi ? getBranchSafe() : "local")
logger.lifecycle("======================================================================")
logger.lifecycle(">>> >>> >>> >>> >>> >>> Building Ji Libs: " + version)
logger.lifecycle("======================================================================")

def metaProjects = [
        'jilibs-bom',
        'jilibs-catalog'
]

def debugArgs = [
        "-enableassertions",
        "-Dmixin.debug.verify=true",
        //"-Dmixin.debug.strict=true",
        "-Dmixin.debug.countInjections=true",
]


import com.diffplug.spotless.LineEnding
import groovy.json.JsonSlurper
import net.fabricmc.loom.task.AbstractRemapJarTask
import net.fabricmc.loom.task.ValidateMixinNameTask
import org.apache.commons.codec.digest.DigestUtils
import net.fabricmc.fabric.impl.build.CommitHashValueSource
import net.fabricmc.fabric.impl.build.GitBranchValueSource
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

//======================================================================================== GETTING SUBPROJECT VERSIONS
// 11.0.0+a2b5c9f2ef
def getSubprojectVersion(Project project) {
    // Get the version from the gradle.properties file
    def version = project.properties["${project.name}-version"]

    if (!version) {
        throw new NullPointerException("Could not find version for " + project.name)
    }

    def isCi = providers.environmentVariable("CI").present || project.hasProperty("ci")

    if (!isCi) {
        return version + "+local"
    }

    def hashProvider = project.providers.of(CommitHashValueSource.class) {
        parameters.directory = project.name
    }

    def fullHash = ""

    try {
        fullHash = hashProvider.get()
    } catch (Exception e) {
        logger.warn("Could not get commit hash for project ${project.name}: " + e.getMessage())
        fullHash = ""
    }

    def shortHash
    if (fullHash && fullHash.length() >= 8) {
        shortHash = fullHash.substring(0, 8)
    } else if (fullHash && fullHash.length() > 0) {
        // hash exists but is shorter than 8 (rare)
        shortHash = fullHash
    } else {
        shortHash = "unknown"
        logger.warn("Using fallback version suffix for ${project.name} because no commit hash could be determined.")
    }

    return version + "+" + shortHash + DigestUtils.sha256Hex(project.rootProject.minecraft_version).substring(0, 2)
}

//======================================================================================== SETTING UP MODULE DEPENDENCIES
def moduleDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
    def clientOutputs = depNames.iterator().collect { findProject(":$it").sourceSets.client.output }

    project.dependencies {
        deps.each {
            api it
        }

        clientOutputs.each {
            clientImplementation it
        }
    }

    def depNodes = deps.collect {
        [
                groupId   : it.group,
                artifactId: it.name,
                version   : getSubprojectVersion(project.project(":" + it.name)),
                scope     : "compile"
        ]
    }

    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")

                    for (def depNode in depNodes) {
                        def node = depsNode.appendNode("dependency")

                        for (def entry in depNode) {
                            node.appendNode(entry.key, entry.value)
                        }
                    }
                }
            }
        }
    }
}

//======================================================================================== SETTING UP ALL PROJECTS
allprojects {
    group = "dev.jiraiyah.jilibs"

    apply plugin: "maven-publish"
    //apply plugin: "me.modmuss50.remotesign"

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    //remoteSign {
    //    requestUrl = providers.environmentVariable("SIGNING_SERVER")
    //    pgpAuthKey = providers.environmentVariable("SIGNING_PGP_KEY")
    //    jarAuthKey = providers.environmentVariable("SIGNING_JAR_KEY")

    //    useDummyForTesting = !providers.environmentVariable("SIGNING_SERVER").present

    //    afterEvaluate {
    // PGP sign all maven publications.
    //        sign publishing.publications.mavenJava
    //    }
    //}

    publishing {
        setupRepositories(repositories, repsyUrl, repsyUsername, repsyPassword)
    }

    if (metaProjects.contains(it.name)) {
        return
    }

    apply plugin: "java-library"
    apply plugin: "checkstyle"
    apply plugin: "fabric-loom"
    apply plugin: "com.diffplug.spotless"

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    java {
        // Must be added before the split source sets are setup.
        withSourcesJar()
    }

    loom {
        splitEnvironmentSourceSets()
        mixin {
            useLegacyMixinAp = false
        }

        runtimeOnlyLog4j = true
    }

    loom.runs.configureEach {
        vmArgs(debugArgs)
    }

    allprojects.each { p ->
        if (metaProjects.contains(p.name)) {
            return
        }

        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
            sourceSet p.sourceSets.client
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:$rootProject.minecraft_version"
        mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+${rootProject.yarn_version}:v2"
        modApi "net.fabricmc:fabric-loader:${rootProject.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}+${rootProject.minecraft_version}"
    }

    tasks.withType(ProcessResources).configureEach {
        inputs.property "version", project.version
        inputs.property "loader_version", rootProject.loader_version
        inputs.property "game_version", rootProject.minecraft_version
        inputs.property "java_version", rootProject.java_version

        filesMatching("fabric.mod.json") {
            expand "version": inputs.properties.version,
                    "loader_version": inputs.properties.loader_version,
                    "game_version": inputs.properties.game_version,
                    "java_version": inputs.properties.java_version
        }
    }

    spotless {
        lineEndings = LineEnding.UNIX

        java {
            licenseHeaderFile(rootProject.file("HEADER"))
            removeUnusedImports()
            importOrder('java', 'javax', '', 'net.minecraft', 'net.fabricmc', 'dev.jiraiyah')
            leadingSpacesToTabs()
            trimTrailingWhitespace()
        }

        // Sort the en_us translation files
        json {
            target 'src/**/lang/en_us.json'
            targetExclude 'src/**/generated/**'
            gson().indentWithSpaces(2).sortByKeys()
        }

        tasks.matching { it.name == 'validateModules' }.configureEach { validateTask ->
            // ensure this uses the project-local processResources
            validateTask.dependsOn tasks.named('processResources')
        }

        // Optional: helpful debug logging (temporary)
// prints which file validateModules will check; remove after debugging
        tasks.matching { it.name == 'validateModules' }.configureEach { validateTask ->
            validateTask.doFirst {
                def expanded = file("$buildDir/resources/main/fabric.mod.json")
                def source = file("src/main/resources/fabric.mod.json")
                logger.lifecycle("validateModules: expanded exists=${expanded.exists()} -> ${expanded.path}")
                if (expanded.exists()) {
                    logger.lifecycle("expanded content (first lines):\n" + expanded.text.readLines().take(10).join("\n"))
                } else if (source.exists()) {
                    logger.lifecycle("source template (first lines):\n" + source.text.readLines().take(10).join("\n"))
                } else {
                    logger.lifecycle("No fabric.mod.json found in source or build resources for ${project.path}")
                }
            }
        }
    }

    checkstyle {
        configFile = rootProject.file("checkstyle.xml")
        toolVersion = "10.20.2"
    }

    tasks.withType(AbstractArchiveTask).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    //remoteSign {
    //    sign remapJar
    //}

    String archivesName = project.base.archivesName.get()
    [jar, sourcesJar].each {
        it.from(rootProject.file("LICENSE")) {
            rename { "${it}-${archivesName}" }
        }
    }

    if (file("src/client").exists() && !file("src/main").exists()) {
        tasks.named("remapJar", AbstractRemapJarTask) {
            additionalClientOnlyEntries.add("LICENSE-${archivesName}".toString())
        }

        remapSourcesJar {
            additionalClientOnlyEntries.add("LICENSE-${archivesName}".toString())
        }
    }

    tasks.register('validateMixinNames', ValidateMixinNameTask) {
        source(sourceSets.main.output)
        source(sourceSets.client.output)

        outputs.upToDateWhen { true } // Task has no outputs
    }
    check.dependsOn "validateMixinNames"

    // Apply to each valid subproject.
    apply from: rootProject.file('gradle/package-info.gradle')
    apply from: rootProject.file('gradle/validate-annotations.gradle')
}

logger.lifecycle("======================================================================")

// Apply auxiliary buildscripts to submodules
// This must be done after all plugins are applied to subprojects
apply from: "gradle/module-validation.gradle"
apply from: "gradle/module-versioning.gradle"

//======================================================================================== SETTING UP JAVA DOCS
loom {
    accessWidenerPath = file("gradle/javadoc.accesswidener")
}

javadoc {
    options {
        source = "21"
        encoding = "UTF-8"
        charSet = "UTF-8"
        memberLevel = JavadocMemberLevel.PACKAGE
        links(
                "https://maven.fabricmc.net/docs/yarn-${rootProject.minecraft_version}+${project.yarn_version}/"
        )
        // Disable the crazy super-strict doclint tool in Java 8
        addStringOption("Xdoclint:none", "-quiet")

        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
    }

    allprojects.each {
        if (metaProjects.contains(it.name)) {
            return
        }

        source(it.sourceSets.main.allJava)
        source(it.sourceSets.client.allJava)
    }

    classpath = files(sourceSets.main.compileClasspath, sourceSets.client.compileClasspath)
    include("**/api/**")
    failOnError = true
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    //Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
    archiveClassifier = "fatjavadoc"
}

build.dependsOn javadocJar

//======================================================================================== SETUP PRODUCTION MODS

configurations {
    productionMods {
        transitive = false
    }
}

def productionMods = project.files(configurations.productionMods, remapJar.archiveFile)

//======================================================================================== POM MOD METADATA INFORMATION
def addPomMetadataInformation(Project project, MavenPom pom) {
    def modJsonFile = project.file("src/main/resources/fabric.mod.json")

    if (!modJsonFile.exists()) {
        modJsonFile = project.file("src/client/resources/fabric.mod.json")
    }

    def modJson = new JsonSlurper().parse(modJsonFile)
    pom.name = modJson.name
    pom.url = "https://github.com/drkhodakarami/JiLibs/tree/HEAD/${project.rootDir.relativePath(project.projectDir)}"
    pom.description = modJson.description
    pom.licenses {
        license {
            name = "MIT"
            url = "https://opensource.org/license/mit"
        }
    }
    pom.developers {
        developer {
            name = "TheMentor"
            url = "https://www.youtube.com/@TheMentorCodeLab"
        }
    }
    pom.scm {
        connection = "scm:git:https://github.com/drkhodakarami/JiLibs.git"
        url = "https://github.com/drkhodakarami/JiLibs"
        developerConnection = "scm:git:git@github.com:drkhodakarami/JiLibs.git"
    }
    pom.issueManagement {
        system = "GitHub"
        url = "https://github.com/drkhodakarami/JiLibs/issues"
    }
}

//======================================================================================== SETUP SUB PROJECTS

subprojects {
    if (metaProjects.contains(it.name)) {
        return
    }

    base {
        archivesName = project.name
    }

    dependencies {
        // Make all modules depend on the shared api
        if (project.name != "jilibs-shared") {
           implementation project(path: ':jilibs-shared', configuration: 'namedElements')
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    addPomMetadataInformation(project, pom)
                }
                artifact(remapJar) {
                    builtBy(remapJar)
                }

                artifact(remapSourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }
    }

    def projectName = it.name
    def projectVersion = getSubprojectVersion(it)

    // Log the computed version once per subproject
    logger.lifecycle(">>> >>> >>> >>> >>> >>> ${projectName} Version: ${projectVersion}")

    // Skip publishing if the artifact already exists on the maven server
    tasks.withType(PublishToMavenRepository).configureEach {
        onlyIf {
            if (!repsyUrl) {
                // Always try to publish if the maven url is not set (e.g locally)
                return true
            }

            //https://repo.repsy.io/mvn/jiraiyah/jilibs
            def artifactPath = repsyUrl + "/${projectName}/${projectVersion}/${projectName}-${projectVersion}.pom"

            boolean exists = HttpClient.newHttpClient().withCloseable { client ->
                def request = HttpRequest.newBuilder()
                        .uri(URI.create(artifactPath))
                        .method("HEAD", HttpRequest.BodyPublishers.noBody())
                        .build()

                def response = client.send(request, HttpResponse.BodyHandlers.discarding())
                response.statusCode() == 200
            }

            if (exists) {
                logger.lifecycle("${projectName}-${projectVersion}.pom has already been published")
            } else {
                logger.lifecycle("${projectName}-${projectVersion}.pom does not exist, publishing")
            }

            return !exists
        }
    }

    // We manually handle the pom generation
    loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

    javadoc.enabled = false
}

logger.lifecycle("======================================================================")

//======================================================================================== SETTING UP PUBLISHING TO MAVEN

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy(remapJar)
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact javadocJar

            pom {
                addPomMetadataInformation(rootProject, pom)
            }

            List<Map<String, String>> dependencies = []

            subprojects.each {

                if (metaProjects.contains(it.name)) {
                    return
                }

                dependencies.add([
                        'groupId': it.group,
                        'artifactId': it.name,
                        'version': getSubprojectVersion(it),
                        'scope': 'compile'
                ])
            }

            def thisGroup = group
            def thisVersion = version

            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                for (dep in dependencies) {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", dep['groupId'])
                    depNode.appendNode("artifactId", dep['artifactId'])
                    depNode.appendNode("version", dep['version'])
                    depNode.appendNode("scope", dep['scope'])
                }
            }
        }
    }
}

// Required until the deprecation is removed. Fabric API's main jar that is published to maven does not contain sub modules.
loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

//======================================================================================== SETTING UP PUBLISHING REPOSITORY
void setupRepositories(RepositoryHandler repositories, String repsyUrl, String repsyUsername, String repsyPassword) {
    //===================================================== >>> LOCAL MAVEN <<<
    repositories.mavenLocal() // uncomment for testing
    if (repsyUrl) {
        repositories.maven {
            url = repsyUrl
            credentials {
                username = repsyUsername
                password = repsyPassword
            }
        }
    }
}

//======================================================================================== SETTING UP ORDER OF OPERATION FOR REMAP JAR
subprojects.each {
    if (metaProjects.contains(it.name)) {
        return
    }

    remapJar.dependsOn("${it.path}:remapJar")
}

//======================================================================================== SETTING UP SUB PROJECT DEPENDENCY ON MAIN
//This will be used for "game test" and "client game test" modular projects
def devOnlyModules = []

dependencies {
    afterEvaluate {
        subprojects.each {
            if (metaProjects.contains(it.name)) {
                return
            }

            api project(path: "${it.path}", configuration: "namedElements")
            clientImplementation project("${it.path}:").sourceSets.client.output
        }
    }
}

configurations {
    nestedJars {
        transitive = false
    }
}

dependencies {
    subprojects.each {
        if (it.name in devOnlyModules || metaProjects.contains(it.name)) {
            return
        }

        nestedJars project("${it.path}")
    }
}

remapJar {
    nestedJars.from configurations.nestedJars
}

//======================================================================================== FILE NAME SANITY CHECK
// Attempt to create a single jar with all files from all nested jars, this will fail if there are duplicate files.
tasks.register("checkNoDuplicateFiles", Zip) {
    inputs.files configurations.nestedJars
    destinationDirectory = layout.buildDirectory.dir("test")

    from {
        configurations.nestedJars.files.collect { zipTree(it) }
    }

    // We expect these files to be duplicated, so exclude them.
    exclude 'META-INF/**'
    exclude 'fabric.mod.json'
}

check.dependsOn "checkNoDuplicateFiles"

//======================================================================================== PUBLISHING TO WEBSITES
//publishMods {
//    file = remapJar
//    changelog = providers.environmentVariable("CHANGELOG").getOrElse("No changelog provided")
//    type = project.prerelease == "true" ? BETA : STABLE
//    displayName = "[${project.minecraft_version}] Ji Libs $project.version"
//    modLoaders.add("fabric")
//    dryRun = providers.environmentVariable("CURSEFORGE_API_KEY").getOrNull() == null
//
//    curseforge {
//        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
//        projectId = "306612"
//        minecraftVersions.add(project.curseforge_minecraft_version)
//    }
//    modrinth {
//        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
//        projectId = "P7dR8mSH"
//        minecraftVersions.add(project.minecraft_version)
//    }
//    github {
//        accessToken = providers.environmentVariable("GITHUB_TOKEN")
//        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("FabricMC/dryrun")
//        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
//    }
//}
//
//assemble.dependsOn remapJar

//======================================================================================== NOT USED

import java.util.stream.Collectors

//======================================================================================== RELEASE VERSION SANITY CHECK
// A task to ensure that the version being released has not already been released.
tasks.register('checkVersion') {
    doFirst {
        def xml = new URL(repsyUrl + "/jilibs/maven-metadata.xml").text
        def metadata = new groovy.xml.XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text();
        if (versions.contains(version)) {
            throw new RuntimeException("${version} has already been released!")
        }
    }
}

//tasks.publishMods.dependsOn checkVersion
//publish.mustRunAfter checkVersion